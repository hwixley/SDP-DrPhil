digraph create_disinfect_doors_in_map {
graph [fontname="times-roman"];
node [fontname="times-roman"];
edge [fontname="times-roman"];
create_disinfect_doors_in_map [fillcolor=orange, fontcolor=black, fontsize=11, shape=box, style=filled];
Parallel [fillcolor=gold, fontcolor=black, fontsize=11, shape=parallelogram, style=filled];
create_disinfect_doors_in_map -> Parallel;
loadMap [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Parallel -> loadMap;
runDisinfectionNodes [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Parallel -> runDisinfectionNodes;
Sequence [fillcolor=orange, fontcolor=black, fontsize=11, shape=box, style=filled];
Parallel -> Sequence;
hold [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Sequence -> hold;
resetArm [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Sequence -> resetArm;
localizeRobot [fillcolor=orange, fontcolor=black, fontsize=11, shape=box, style=filled];
Sequence -> localizeRobot;
dummy [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
localizeRobot -> dummy;
awaitTargets [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Sequence -> awaitTargets;
holdAgain [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Sequence -> holdAgain;
snapshotTargets [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Sequence -> snapshotTargets;
publishSprayTargets [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Sequence -> publishSprayTargets;
publishHandle [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Sequence -> publishHandle;
moveToDoor [fillcolor=orange, fontcolor=black, fontsize=11, shape=box, style=filled];
Sequence -> moveToDoor;
Timer [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
moveToDoor -> Timer;
moveTarget2BB [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
moveToDoor -> moveTarget2BB;
disableGlobalCostmap [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
moveToDoor -> disableGlobalCostmap;
disableLocalCostmap [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
moveToDoor -> disableLocalCostmap;
clearCostmaps [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
moveToDoor -> clearCostmaps;
reachTargetPos [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
moveToDoor -> reachTargetPos;
HoldFailureIgnoreRunning [fillcolor=ghostwhite, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
moveToDoor -> HoldFailureIgnoreRunning;
haltCmdVel [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
HoldFailureIgnoreRunning -> haltCmdVel;
"haltCmdVel*" [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
moveToDoor -> "haltCmdVel*";
"Sequence*" [fillcolor=orange, fontcolor=black, fontsize=11, shape=box, style=filled];
Sequence -> "Sequence*";
"moveTarget2BB*" [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
"Sequence*" -> "moveTarget2BB*";
"Condition\n[Sequence]" [fillcolor=ghostwhite, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
"Sequence*" -> "Condition\n[Sequence]";
"Sequence**" [fillcolor=orange, fontcolor=black, fontsize=11, shape=box, style=filled];
"Condition\n[Sequence]" -> "Sequence**";
"publishSprayTargets*" [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
"Sequence**" -> "publishSprayTargets*";
check_not_completed [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
"Sequence**" -> check_not_completed;
Selector [fillcolor=cyan, fontcolor=black, fontsize=11, shape=octagon, style=filled];
"Sequence**" -> Selector;
planTrajectory [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Selector -> planTrajectory;
planTrajectoryLenient [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Selector -> planTrajectoryLenient;
planP2PMove [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Selector -> planP2PMove;
planP2PMoveLenient [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Selector -> planP2PMoveLenient;
dummySuccess [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
Selector -> dummySuccess;
eeToNextPoint [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
"Sequence**" -> eeToNextPoint;
popPose [fillcolor=gray, fontcolor=black, fontsize=11, shape=ellipse, style=filled];
"Sequence**" -> popPose;
}
